# -*- coding: utf-8 -*-
DE_STOPS_2_PRONOUN=[
"ich",
"mir",
"mich",
"du",
"dir",
"dich",
"er",
"ihm",
"ihn",
"sie",
"es",
"wir",
"uns",
"ihr",
"ihnen",
"man",
"manche",
"mancher",
"manchem",
"manchen",
"andere",
"anderes",
"anderem",
"anderen",
"einige",
"einigen",
"einigem",
"jede",
"jeder",
"jedes",
"jedem",
"jeden",
"alle",
"aller",
"allem",
"allen",
"alles",
"beide",
"beiden",
"beides",
"kein",
"keine",
"keins",
"dies",
"diese",
"dieser",
"dieses",
"diesem",
"diesen",
]

DE_STOPS_3_POSSESION=[
"mein",
"meins",
"meine",
"meines",
"dein",
"deins",
"deine",
"deines",
"sein",
"seins",
"seine",
"seines",
"seinem",
"seinen",
"ihre",
"ihrer",
"ihrem",
"ihren",
"ihres",
"unser",
"unse",
"unsere",
"unseres",
"unsem",
"eigen",
"eigene",
"eigenem",
"eigenen",
"eigener",
"eingenes",
]

DE_STOPS_1_ARTICLE=[
"der",
"deren",
"denen",
"die",
"das",
"dem",
"den",
"des",
"dessen",
"ein",
"eine",
"eines",
"einem",
"einen",
"einer",
]

DE_STOPS_4_PREPOSITION=[
"an",
"ans",
"anhand",
"am",
"ab",
"aus",
"außer",
"außere",
"außerem",
"außeren",
"inner",
"innere",
"inneres",
"innerem",
"inneren",
"außerdem",
"auf",
"als",
"bei",
"bis",
"bisher",
"bevor",
"damals",
"durch",
"darauf",
"darunter",
"dazu",
"damit",
"dadurch",
"dabei",
"dagegen",
"dafür",
"daher",
"dahin",
"danach",
"daneben",
"davor",
"darüber",
"daraus",
"darunter",
"davon",
"daoben",
"entlang",
"gegen",
"für",
"fort",
"her",
"herum",
"herein",
"herauf",
"hin",
"hinrüber",
"hinzu",
"hinter",
"hinein",
"hingegen",
"hinweg",
"in",
"indem",
"ins",
"im",
"mit",
"mittels",
"nach",
"nachdem",
"neben",
"oben",
"rund",
"seit",
"seitdem",
"um",
"unter",
"über",
"vor",
"von",
"vom",
"während",
"wegen",
"innerhalb",
"zwischen",
"zusammen",
"zu",
"zudem",
"zum",
"zur",
"zurück",
]

DE_STOPS_13_ADV=[
"sich",
"selber",
"selbst",
"gemeinsamen",
"gemeinsam",
"zuerst",
"zuletzt",
"hierfür",
"nur",
"wieder",
"teilweise",
"wiederum",
"zumeist",
"zumindest",
"besonders",
"bereits",
"zugleich",
"insbesondere",
"insgesammt",
"gesamte",
"fast",
"kaum",
"knapp",
"sehr",
"auch",
"sondern",
"statt",
"stattdessen",
"solche",
"solcher",
"solches",
"solchem",
"solchen",
"sowohl",
"schon",
"bereit",
"noch",
"manchmal",
"bestimmt",
"gleich",
"selten",
"oft",
"wohl",
"öfter",
"teils", # TODO - correct othe adv
]

DE_STOPS_7_CONJ_W=[
"was",
"wo",
"woran",
"woraus",
"womit",
"wodurch",
"wobei",
"wohin",
"woher",
"wonach",
"wofür",
"worüber",
"wozu",
"wer",
"wem",
"wen",
"wann",
"wenn",
"welche",
"welcher",
"welches",
"warum",
"wie",
"wieso",
"weshalb",
"deshalb",
]

DE_STOPS_14_CONNECTOR=[
"und",
"oder",
"entweder",
"weder",
"nicht",
"ohne",
"trotzdem",
]

DE_STOPS_8_CONJ=[
"da",
"dann",
"allerdings",
"aufgrund",
"ob",
"obwohl",
"dass",
"aber",
"weil",
]

DE_STOPS_9_DEKO=[
"ja",
"je",
"ehr",
"zwar",
"etwa",
"etwas",
"eben",
"ebenso",
"ebenfall",
"ebenfalls",
"gegebenfalls",
"soeben",
"sogar",
"sowie",
"sowieso",
"so",
"somit",
"jedoch",
"jeweils",
"vorher",
"immer",
"normals",
"doch",
"heute",
"gersten",
"jetzt",
"nun",
"dort",
"hier",
]

DE_STOPS_10_VERB_SEP=[
"teil",
"frei",
"los",
]

DE_STOPS_5_VERB_SEIN=[
"bin",
"bist",
"ist",
"sind",
"war",
"warst",
"waren",
"waret",
"wäre",
"wären",
"wäret",
"sei",
"habe",
"hast",
"hat",
"haben",
"hatte",
"hatten",
"werd",
"wird",
"werden",
"werdet",
"wurde",
"wurdet",
"wurden",
"worden",
"geworden",
"würde",
"würden",
]

DE_STOPS_6_MOD=[
"kann",
"kannst",
"können",
"konnte",
"konnten",
"könnte",
"wollen",
"wollte",
"will",
"willst",
"wollte",
"mag",
"magt",
"magst",
"mog",
"mögen",
"möchte",
"möchtest",
"möchten",
"möchtet",
"muss",
"müssen",
"musst",
"mussten",
"müssten",
"musste",
"soll",
"sollte",
"sollt",
"brauche",
"brauchen",
"brauchst",

]

DE_STOPS_12_ADJ=[
"einzeln",
"einzelne",
"einzelnes",
"einzelnen",
"häufig",
"häufige",
"häufigem",
"häufigen",
"möglich",
"neu",
"neue",
"neuem",
"neuen",
"neuer",
"neues",
"neun",
"alt",
"altes",
"alter",
"altem",
"alten",
"groß",
"größer",
"größerem",
"größeren",
"klein",
"kleiner",
"kleinerem",
"kleineren",
"stark",
"weit",
"weiter",
"weiterem",
"weiteren",
"weiterhin",
"leicht",
"schwer",
"tief",
"tiefe",
"tiefer",
"tiefem",
"tiefen",
"lang",
"lange",
"langem",
"langen",
"kurz",
"kurze",
"kurzem",
"kurzen",
"hoch",
"hohen",
"genau",
"gut",
"besser",
"bessere",
"besserem",
"besseren",
"best",
"beste",
"bestem",
"besten",
"schlecht",
"schlechter",
"viel",
"viele",
"vieler",
"vieles",
"vielen",
"vielem",
"mehr",
"mehrere",
"mehreres",
"mehrerem",
"mehreren",
"meist",
"meisten",
"meistem",
"wenig",
"weniger",
]

DE_STOPS_11_VERB=[
"tun",
"tut",
"mach",
"macht",
"machen",
"gebe",
"gebst",
"geben",
"gegeben",
"gilt",
"gelten",
"lassen",
"lässt",
"gehen",
"gehe",
"gehst",
"geht",
"gegangen",
"gab",
"kam",
"kamen",
"kommen",
"kommt",
]

DE_STOPS_15_NUM=[
"eins",
"ein",
"zwei",
"drei",
"vier",
"fünf",
"sechs",
"sieben",
"acht",
"neun",
"zehn",
"erst",
"erster",
"erste",
"erstes",
"erstem",
"zweite",
"zweitem",
"zweiten",
]

DE_STOPS_16_ABBR=[
"bzw",
"eg",
"i.e.",
"ie.",
"z.b.",
"zb.",
"d.h.",
"u.a.",
]

DE_STOPS_MISC = [
"zunächst", "weitere", "mal", "zuvor", "Allgemeinen", "hinten", "unten", "jene", "vorn", "gibt", "also", "darf", "anders", "beim"]
DE_STOPS = DE_STOPS_1_ARTICLE + DE_STOPS_2_PRONOUN + DE_STOPS_3_POSSESION + DE_STOPS_4_PREPOSITION + DE_STOPS_5_VERB_SEIN + DE_STOPS_6_MOD + DE_STOPS_7_CONJ_W + DE_STOPS_8_CONJ + DE_STOPS_9_DEKO + DE_STOPS_10_VERB_SEP + DE_STOPS_12_ADJ + DE_STOPS_13_ADV + DE_STOPS_14_CONNECTOR + DE_STOPS_15_NUM
DE_STOPS += DE_STOPS_MISC

STOPWORDS_DE = dict([(w, 1) for w in DE_STOPS])

# verb ending: tzen, ieren, eln

# feature vector
def stopcode(word):
    if word in DE_STOPS_1_ARTICLE:          return '01'
    elif word in DE_STOPS_2_PRONOUN:        return '02'
    elif word in DE_STOPS_3_POSSESION:      return '03'
    elif word in DE_STOPS_4_PREPOSITION:    return '04'
    elif word in DE_STOPS_5_VERB_SEIN:      return '05'
    elif word in DE_STOPS_6_MOD:            return '06'
    elif word in DE_STOPS_7_CONJ_W:         return '07'
    elif word in DE_STOPS_8_CONJ:           return '08'
    elif word in DE_STOPS_9_DEKO:           return '09'
    elif word in DE_STOPS_10_VERB_SEP:      return '10'
    elif word in DE_STOPS_11_VERB:          return '11'
    elif word in DE_STOPS_12_ADJ:           return '12'
    elif word in DE_STOPS_13_ADV:           return '13'
    elif word in DE_STOPS_14_CONNECTOR:     return '14'
    elif word in DE_STOPS_15_NUM:           return '15'
    elif word in DE_STOPS_16_ABBR:          return '16'
    else:                                   return '00'

def stopwords(): return STOPWORDS_DE


# TODO: "Bedingt ...", "mit dem Ersten Aachener Frieden:q"
